# -*- coding: utf-8 -*-
"""TF_for_experts.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Nhl7kbj6VOcsx1LOdb3EyLjd1YXuE99D
"""

import tensorflow as tf
from tensorflow.keras.layers import Dense, Flatten, Conv2D

mnist = tf.keras.datasets.mnist
(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train = x_train / 255.0
x_test = x_test / 255.0

x_train = x_train[..., tf.newaxis]
x_test = x_test[..., tf.newaxis]

type(x_train[0][0, 0, 0])

train_dataset = tf.data.Dataset.from_tensor_slices((x_train, y_train)).shuffle(1000).batch(32)
test_dataset = tf.data.Dataset.from_tensor_slices((x_test, y_test)).batch(32)

class MyModel(tf.keras.Model):
  def __init__(self):
    super().__init__()
    self.conv1 = Conv2D(32, 3, activation="relu")
    self.flatten = Flatten()
    self.d1 = Dense(128, activation="relu")
    self.d2 = Dense(10)

  def call(self, x):
    x = self.conv1(x)
    x = self.flatten(x)
    x = self.d1(x)
    x = self.d2(x)

    return x

model = MyModel()

loss_function = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)

optimizer = tf.keras.optimizers.Adam()

train_loss = tf.keras.metrics.Mean()
test_loss = tf.keras.metrics.Mean()

train_accuracy = tf.keras.metrics.SparseCategoricalAccuracy()
test_accuracy = tf.keras.metrics.SparseCategoricalAccuracy()

epochs = 5

for epoch in range(epochs):
  for images, labels in train_dataset:
    with tf.GradientTape() as tape:
      pred = model(images)
      loss = loss_function(labels, pred)
    gradients = tape.gradient(loss, model.trainable_variables)
    optimizer.apply_gradients(zip(gradients, model.trainable_variables))

    train_loss(loss)
    train_accuracy(labels, pred)

  for images, labels in test_dataset:
    pred = model(images)
    loss = loss_function(labels, pred)
    test_loss(loss)
    test_accuracy(labels, pred)

    print("Epoch: ", epoch,
          "Train loss: ", train_loss.result(),
          "Train accuracy: ", train_accuracy.result(),
          "Test loss: ", test_loss.result(),
          "test accuracy", test_accuracy.result())